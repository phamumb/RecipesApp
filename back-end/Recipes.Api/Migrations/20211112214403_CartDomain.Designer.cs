// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recipes.Repository.Context;

namespace Recipes.Api.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20211112214403_CartDomain")]
    partial class CartDomain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("IngredientDomainRecipesDomain", b =>
                {
                    b.Property<long>("Ingredientsid")
                        .HasColumnType("bigint");

                    b.Property<long>("Recipesid")
                        .HasColumnType("bigint");

                    b.HasKey("Ingredientsid", "Recipesid");

                    b.HasIndex("Recipesid");

                    b.ToTable("IngredientDomainRecipesDomain");
                });

            modelBuilder.Entity("Recipes.Repository.Domain.CartDomain", b =>
                {
                    b.Property<long?>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Key");

                    b.HasIndex("IngredientId");

                    b.ToTable("CartDomain");
                });

            modelBuilder.Entity("Recipes.Repository.Domain.IngredientDomain", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Recipes.Repository.Domain.RecipesDomain", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Instructions")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Test")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Recipes.Repository.Domain.RecipesIngredientDomain", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Amount")
                        .HasColumnType("longtext");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipesId");

                    b.ToTable("RecipesIngredients");
                });

            modelBuilder.Entity("IngredientDomainRecipesDomain", b =>
                {
                    b.HasOne("Recipes.Repository.Domain.IngredientDomain", null)
                        .WithMany()
                        .HasForeignKey("Ingredientsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Repository.Domain.RecipesDomain", null)
                        .WithMany()
                        .HasForeignKey("Recipesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Repository.Domain.CartDomain", b =>
                {
                    b.HasOne("Recipes.Repository.Domain.IngredientDomain", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Recipes.Repository.Domain.RecipesIngredientDomain", b =>
                {
                    b.HasOne("Recipes.Repository.Domain.IngredientDomain", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Repository.Domain.RecipesDomain", "Recipes")
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
